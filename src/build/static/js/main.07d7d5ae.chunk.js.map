{"version":3,"sources":["components/styles/container.js","components/styles/dropzone.js","components/dropzone.js","components/styles/form.js","components/form.js","components/styles/result.js","components/results.js","components/styles/panel.js","App.js","index.js"],"names":["Container","styled","div","DropzoneContainer","DropZone","props","isDragAccept","isDragReject","isDragActive","getColor","ThumbContainer","Thumb","Image","img","Dropzone","useContext","PostContext","context","setContext","useDropzone","accept","maxFiles","onDrop","acceptedFiles","map","file","Object","assign","preview","URL","createObjectURL","image","getRootProps","getInputProps","path","src","alt","name","StyledForm","Form","postForm","Label","apiKey","outputFormat","init","height","menubar","toolbar","onEditorChange","content","editor","htmlText","PrimaryButton","text","onClick","allowDisabledFocus","Result","ResultImageContainer","ResultScoreContainer","ResultImage","Score","ScoreItem","ResultTextContainer","ResultSubmittedText","Results","entries","imageResult","length","AdultClassificationScore","IsImageAdultClassified","toString","RacyClassificationScore","IsImageRacyClassified","totalTime","imageResults","htmlTextResult","NormalizedText","Classification","Category1","Category2","Category3","ReviewRecommended","htmlTextResults","Panel","form","DefaultEffects","elevation8","defaultPostData","errorMessage","React","createContext","App","useState","Provider","value","startTime","Date","getTime","aiImageResult","aiHtmlTextResult","fetch","method","headers","type","body","then","response","json","data","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.07d7d5ae.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n  width: 100vw;\r\n  height: 100vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nexport default Container;\r\n","import styled from \"styled-components\";\r\n\r\nconst getColor = (props) => {\r\n  if (props.isDragAccept) {\r\n    return \"#00e676\";\r\n  }\r\n  if (props.isDragReject) {\r\n    return \"#ff1744\";\r\n  }\r\n  if (props.isDragActive) {\r\n    return \"#2196f3\";\r\n  }\r\n  return \"#eeeeee\";\r\n};\r\n\r\nconst DropzoneContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\nconst DropZone = styled.div`\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding: 10px;\r\n  border-width: 2px;\r\n  border-radius: 2px;\r\n  border-color: ${(props) => getColor(props)};\r\n  border-style: dashed;\r\n  background-color: #fafafa;\r\n  color: #bdbdbd;\r\n  outline: none;\r\n  transition: border 0.3s ease-in-out;\r\n`;\r\n\r\nconst ThumbContainer = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n  margin-top: 16px;\r\n`;\r\nconst Thumb = styled.div`\r\n  display: inline-flex;\r\n  border-radius: 2;\r\n  border: 1px solid #eaeaea;\r\n  margin-bottom: 8;\r\n  margin-right: 8;\r\n  width: 100px;\r\n  height: 100px;\r\n  padding: 4;\r\n  box-sizing: border-box;\r\n`;\r\nconst Image = styled.img`\r\n  display: block;\r\n  width: auto;\r\n  height: 100%;\r\n`;\r\n\r\nexport { DropzoneContainer, DropZone, ThumbContainer, Thumb, Image };\r\n","import React, { useContext } from \"react\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport {\r\n  DropzoneContainer,\r\n  DropZone,\r\n  ThumbContainer,\r\n  Thumb,\r\n  Image,\r\n} from \"./styles/dropzone\";\r\n\r\nimport { PostContext } from \"../App\";\r\n\r\nconst Dropzone = () => {\r\n  const [context, setContext] = useContext(PostContext);\r\n  // Setup a state hook for attached files\r\n  const {\r\n    getRootProps,\r\n    getInputProps,\r\n    isDragActive,\r\n    isDragAccept,\r\n    isDragReject,\r\n  } = useDropzone({\r\n    accept: \"image/*\",\r\n    maxFiles: 1,\r\n    onDrop: (acceptedFiles) => {\r\n      acceptedFiles.map((file) =>\r\n        Object.assign(file, {\r\n          // set a image object of the uploaded image in local memory\r\n          preview: URL.createObjectURL(file),\r\n        })\r\n      );\r\n      setContext({ ...context, image: acceptedFiles[0] });\r\n    },\r\n  });\r\n\r\n  return (\r\n    <DropzoneContainer>\r\n      <DropZone {...getRootProps({ isDragActive, isDragAccept, isDragReject })}>\r\n        <input {...getInputProps()} />\r\n        <p>Drag an image here, or click to select a file</p>\r\n      </DropZone>\r\n      {context.image.path && (\r\n        <ThumbContainer>\r\n          <Thumb key={context.image.name}>\r\n            <Image src={context.image.preview} alt=\"Thumb\" />\r\n          </Thumb>\r\n        </ThumbContainer>\r\n      )}\r\n    </DropzoneContainer>\r\n  );\r\n};\r\n\r\nexport default Dropzone;\r\n","import styled from \"styled-components\";\r\n\r\nconst StyledForm = styled.div`\r\n  button {\r\n    margin-top: 30px;\r\n    justify-self: flex-end;\r\n  }\r\n  fieldset {\r\n    border: 0;\r\n    padding: 0;\r\n  }\r\n`;\r\n\r\nexport default StyledForm;\r\n","import React, { useContext } from \"react\";\r\nimport { PrimaryButton } from \"office-ui-fabric-react\";\r\nimport { Label } from \"office-ui-fabric-react/lib/Label\";\r\nimport Dropzone from \"./dropzone\";\r\nimport { Editor } from \"@tinymce/tinymce-react\";\r\nimport StyledForm from \"./styles/form\";\r\n\r\nimport { PostContext } from \"../App\";\r\n\r\nconst Form = ({ postForm }) => {\r\n  // setup hooks for the image and html text\r\n  const [context, setContext] = useContext(PostContext);\r\n\r\n  return (\r\n    <StyledForm>\r\n      <Label>Attach Image</Label>\r\n      <Dropzone />\r\n\r\n      <Label>Post</Label>\r\n      <Editor\r\n        apiKey=\"pbnjgrsv8vjbqdq0jo73unvuc5tqbc5yvf267bupqc06cty4\"\r\n        outputFormat=\"text\"\r\n        init={{\r\n          height: 300,\r\n          menubar: false,\r\n          toolbar:\r\n            \"undo redo | formatselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | removeformat | help\",\r\n        }}\r\n        onEditorChange={(content, editor) => {\r\n          setContext({ ...context, htmlText: content });\r\n        }}\r\n      />\r\n\r\n      <PrimaryButton\r\n        text=\"Submit\"\r\n        onClick={() => {\r\n          postForm();\r\n        }}\r\n        allowDisabledFocus\r\n      />\r\n    </StyledForm>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import styled from \"styled-components\";\r\n\r\nconst Result = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  &:first-child {\r\n    padding-bottom: 15px;\r\n    border-bottom: 1px solid #b1adab;\r\n    margin-bottom: 15px;\r\n  }\r\n  &:only-child {\r\n    padding-bottom: none;\r\n    border-bottom: none;\r\n    margin-bottom: 30px;\r\n  }\r\n`;\r\nconst ResultImageContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin: 0 30px 0 0;\r\n  flex: 1;\r\n`;\r\nconst ResultScoreContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex: 1;\r\n`;\r\n\r\nconst ResultImage = styled.img`\r\n  object-fit: contain;\r\n  max-height: 200px;\r\n`;\r\nconst Score = styled.div``;\r\n\r\nconst ScoreItem = styled.div`\r\n  font-size: 0.9rem;\r\n  strong {\r\n    color: #0078d4;\r\n  }\r\n`;\r\n\r\nconst ResultTextContainer = styled.div`\r\n  margin: 0 30px 0 0;\r\n  flex: 1;\r\n`;\r\nconst ResultSubmittedText = styled.div`\r\n  flex: 1;\r\n`;\r\n\r\nexport {\r\n  Result,\r\n  ResultImageContainer,\r\n  ResultScoreContainer,\r\n  ResultImage,\r\n  Score,\r\n  ScoreItem,\r\n  ResultTextContainer,\r\n  ResultSubmittedText,\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { Label } from \"office-ui-fabric-react/lib/Label\";\r\nimport {\r\n  Result,\r\n  ResultImageContainer,\r\n  ResultScoreContainer,\r\n  ResultImage,\r\n  Score,\r\n  ScoreItem,\r\n  ResultTextContainer,\r\n  ResultSubmittedText,\r\n} from \"./styles/result\";\r\nimport { PostContext } from \"../App\";\r\n\r\nfunction Results() {\r\n  const [context] = useContext(PostContext);\r\n\r\n  const imageResults = () => {\r\n    if (Object.entries(context.imageResult).length !== 0) {\r\n      return (\r\n        <Result>\r\n          <ResultImageContainer>\r\n            <Label>Submitted Image</Label>\r\n            <ResultImage src={context.image.preview} alt=\"Thumb\" />\r\n          </ResultImageContainer>\r\n          <ResultScoreContainer>\r\n            <Score>\r\n              <Label>Image Score:</Label>\r\n              <ScoreItem>\r\n                <strong>Adult Classification Score</strong>\r\n                <br />\r\n                {context.imageResult.AdultClassificationScore}\r\n              </ScoreItem>\r\n              <ScoreItem>\r\n                <strong>Is ImageAdult Classified</strong>\r\n                <br />\r\n                {context.imageResult.IsImageAdultClassified.toString()}\r\n              </ScoreItem>\r\n              <ScoreItem>\r\n                <strong>Racy Classification Score</strong>\r\n                <br />\r\n                {context.imageResult.RacyClassificationScore}\r\n              </ScoreItem>\r\n              <ScoreItem>\r\n                <strong>Is ImageRacy Classified</strong>\r\n                <br />\r\n                {context.imageResult.IsImageRacyClassified.toString()}\r\n              </ScoreItem>\r\n              <ScoreItem>\r\n                <strong>Result</strong>\r\n                <br />\r\n                {context.imageResult.Result.toString()}\r\n              </ScoreItem>\r\n              <ScoreItem>\r\n                <strong>Execution Time</strong>\r\n                <br />\r\n                {context.imageResult.totalTime + \"ms\"}\r\n              </ScoreItem>\r\n            </Score>\r\n          </ResultScoreContainer>\r\n        </Result>\r\n      );\r\n    }\r\n  };\r\n\r\n  const htmlTextResults = () => {\r\n    if (Object.entries(context.htmlTextResult).length !== 0) {\r\n      return (\r\n        <Result>\r\n          <ResultTextContainer>\r\n            <Label>Submitted Text (Normalized)</Label>\r\n            <ResultSubmittedText>\r\n              {context.htmlTextResult.NormalizedText}\r\n            </ResultSubmittedText>\r\n          </ResultTextContainer>\r\n          <ResultScoreContainer>\r\n            <Score>\r\n              <Label>Text Score:</Label>\r\n              <ScoreItem>\r\n                <strong>Category 1</strong>\r\n                <br />\r\n                {context.htmlTextResult.Classification.Category1.Score}\r\n              </ScoreItem>\r\n              <ScoreItem>\r\n                <strong>Category 2</strong>\r\n                <br />\r\n                {context.htmlTextResult.Classification.Category2.Score}\r\n              </ScoreItem>\r\n              <ScoreItem>\r\n                <strong>Category 3</strong>\r\n                <br />\r\n                {context.htmlTextResult.Classification.Category3.Score}\r\n              </ScoreItem>\r\n              <ScoreItem>\r\n                <strong>Review Recommended</strong>\r\n                <br />\r\n                {context.htmlTextResult.Classification.ReviewRecommended.toString()}\r\n              </ScoreItem>\r\n              <ScoreItem>\r\n                <strong>Execution Time</strong>\r\n                <br />\r\n                {context.htmlTextResult.totalTime + \"ms\"}\r\n              </ScoreItem>\r\n            </Score>\r\n          </ResultScoreContainer>\r\n        </Result>\r\n      );\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      {imageResults()}\r\n      {htmlTextResults()}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Results;\r\n","import styled from \"styled-components\";\r\nimport { DefaultEffects } from \"@fluentui/react\";\r\n\r\nconst Panel = styled.form`\r\n  display: flex;\r\n  min-width: 700px;\r\n  max-width: 700px;\r\n  flex-direction: column;\r\n  box-shadow: ${DefaultEffects.elevation8};\r\n  padding: 30px;\r\n  font-size: 1rem;\r\n  line-height: 1.5;\r\n`;\r\n\r\nexport default Panel;\r\n","import React, { useState } from \"react\";\nimport Container from \"./components/styles/container\";\nimport Form from \"./components/form\";\nimport Results from \"./components/results\";\nimport Panel from \"./components/styles/panel\";\n\nlet defaultPostData = {\n  image: \"\",\n  htmlText: \"\",\n  imageResult: {},\n  htmlTextResult: {},\n  errorMessage: \"\",\n};\n\nexport const PostContext = React.createContext(defaultPostData);\n\nfunction App() {\n  const [context, setContext] = useState(defaultPostData);\n\n  const postForm = () => {\n    const startTime = new Date().getTime();\n    let totalTime = \"0ms\";\n    let aiImageResult = {};\n    let aiHtmlTextResult = {};\n\n    // Check for an Image\n    if (Object.entries(context.image).length !== 0) {\n      //There is an image, submitting to the AI\n      fetch(\n        \"https://westus2.api.cognitive.microsoft.com/contentmoderator/moderate/v1.0/ProcessImage/Evaluate\",\n        {\n          method: \"POST\",\n          headers: {\n            \"content-type\": context.image.type,\n            \"Ocp-Apim-Subscription-Key\": \"970b9cac7b44461eb95ac7b7e56d193d\",\n          },\n          body: context.image,\n        }\n      )\n        .then((response) => response.json())\n        .then((data) => {\n          totalTime = new Date().getTime() - startTime;\n\n          aiImageResult = { ...data, totalTime: totalTime };\n          setContext({\n            ...context,\n            imageResult: aiImageResult,\n            htmlTextResult: aiHtmlTextResult,\n          });\n        });\n    }\n    // Check for HTML Text\n    if (context.htmlText !== \"\") {\n      //There is text, submitting to the AI\n      fetch(\n        \"https://westus2.api.cognitive.microsoft.com/contentmoderator/moderate/v1.0/ProcessText/Screen?classify=True\",\n        {\n          method: \"POST\",\n          headers: {\n            \"content-type\": \"text/html\",\n            \"Ocp-Apim-Subscription-Key\": \"970b9cac7b44461eb95ac7b7e56d193d\",\n          },\n          body: context.htmlText,\n        }\n      )\n        .then((response) => response.json())\n        .then((data) => {\n          totalTime = new Date().getTime() - startTime;\n          aiHtmlTextResult = { ...data, totalTime: totalTime };\n          setContext({\n            ...context,\n            imageResult: aiImageResult,\n            htmlTextResult: aiHtmlTextResult,\n          });\n        });\n    }\n  };\n  return (\n    <PostContext.Provider value={[context, setContext]}>\n      <Container>\n        <Panel>\n          {Object.entries(context.imageResult).length !== 0 ||\n          Object.entries(context.htmlTextResult).length !== 0 ? (\n            <Results />\n          ) : (\n            <Form postForm={() => postForm()} />\n          )}\n        </Panel>\n      </Container>\n    </PostContext.Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}